
STM32_FDCAN_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029f0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002bc8  08002bc8  00003bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002be8  08002be8  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002be8  08002be8  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002be8  08002be8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002be8  08002be8  00003be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bec  08002bec  00003bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002bf0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08002bfc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002bfc  000040cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000859f  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000178b  00000000  00000000  0000c5db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0000dd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000660  00000000  00000000  0000e600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd10  00000000  00000000  0000ec60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ab1  00000000  00000000  0002b970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8700  00000000  00000000  00034421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ecb21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000221c  00000000  00000000  000ecb64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000eed80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002bb0 	.word	0x08002bb0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002bb0 	.word	0x08002bb0

08000218 <HAL_FDCAN_RxFifo0Callback>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08c      	sub	sp, #48	@ 0x30
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef   RxHeader;
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d015      	beq.n	8000258 <HAL_FDCAN_RxFifo0Callback+0x40>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, Rx) != HAL_OK)
 800022c:	f107 0208 	add.w	r2, r7, #8
 8000230:	4b0b      	ldr	r3, [pc, #44]	@ (8000260 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000232:	2140      	movs	r1, #64	@ 0x40
 8000234:	6878      	ldr	r0, [r7, #4]
 8000236:	f000 fe83 	bl	8000f40 <HAL_FDCAN_GetRxMessage>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <HAL_FDCAN_RxFifo0Callback+0x2c>
    {
    /* Reception Error */
    Error_Handler();
 8000240:	f000 f9a0 	bl	8000584 <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000244:	2200      	movs	r2, #0
 8000246:	2101      	movs	r1, #1
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f000 ff81 	bl	8001150 <HAL_FDCAN_ActivateNotification>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <HAL_FDCAN_RxFifo0Callback+0x40>
    {
      /* Notification Error */
      Error_Handler();
 8000254:	f000 f996 	bl	8000584 <Error_Handler>
    }
  }
}
 8000258:	bf00      	nop
 800025a:	3730      	adds	r7, #48	@ 0x30
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000034 	.word	0x20000034

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026a:	f000 faa6 	bl	80007ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026e:	f000 f83f 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000272:	f000 f907 	bl	8000484 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000276:	f000 f887 	bl	8000388 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 800027a:	481a      	ldr	r0, [pc, #104]	@ (80002e4 <main+0x80>)
 800027c:	f000 fdf4 	bl	8000e68 <HAL_FDCAN_Start>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <main+0x26>
  {
	  Error_Handler();
 8000286:	f000 f97d 	bl	8000584 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800028a:	2200      	movs	r2, #0
 800028c:	2101      	movs	r1, #1
 800028e:	4815      	ldr	r0, [pc, #84]	@ (80002e4 <main+0x80>)
 8000290:	f000 ff5e 	bl	8001150 <HAL_FDCAN_ActivateNotification>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <main+0x3a>
  {
    /* Notification Error */
    Error_Handler();
 800029a:	f000 f973 	bl	8000584 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
 800029e:	2300      	movs	r3, #0
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	e00d      	b.n	80002c0 <main+0x5c>

    /* USER CODE BEGIN 3 */
 80002a4:	4a10      	ldr	r2, [pc, #64]	@ (80002e8 <main+0x84>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4413      	add	r3, r2
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	3301      	adds	r3, #1
 80002ae:	b2d9      	uxtb	r1, r3
 80002b0:	4a0d      	ldr	r2, [pc, #52]	@ (80002e8 <main+0x84>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4413      	add	r3, r2
 80002b6:	460a      	mov	r2, r1
 80002b8:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	3301      	adds	r3, #1
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b0b      	cmp	r3, #11
 80002c4:	ddee      	ble.n	80002a4 <main+0x40>
  }
  /* USER CODE END 3 */
}
 80002c6:	4a08      	ldr	r2, [pc, #32]	@ (80002e8 <main+0x84>)
 80002c8:	4908      	ldr	r1, [pc, #32]	@ (80002ec <main+0x88>)
 80002ca:	4806      	ldr	r0, [pc, #24]	@ (80002e4 <main+0x80>)
 80002cc:	f000 fdf4 	bl	8000eb8 <HAL_FDCAN_AddMessageToTxFifoQ>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <main+0x76>

/**
 80002d6:	f000 f955 	bl	8000584 <Error_Handler>
  * @brief System Clock Configuration
  * @retval None
 80002da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002de:	f000 fadd 	bl	800089c <HAL_Delay>
    /* USER CODE END WHILE */
 80002e2:	e7dc      	b.n	800029e <main+0x3a>
 80002e4:	20000064 	.word	0x20000064
 80002e8:	20000028 	.word	0x20000028
 80002ec:	20000040 	.word	0x20000040

080002f0 <SystemClock_Config>:
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b094      	sub	sp, #80	@ 0x50
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f6:	f107 0318 	add.w	r3, r7, #24
 80002fa:	2238      	movs	r2, #56	@ 0x38
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 fc2a 	bl	8002b58 <memset>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000312:	2000      	movs	r0, #0
 8000314:	f001 fc3a 	bl	8001b8c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
 8000318:	2302      	movs	r3, #2
 800031a:	61bb      	str	r3, [r7, #24]
    Error_Handler();
 800031c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000320:	627b      	str	r3, [r7, #36]	@ 0x24
  }
 8000322:	2340      	movs	r3, #64	@ 0x40
 8000324:	62bb      	str	r3, [r7, #40]	@ 0x28

 8000326:	2302      	movs	r3, #2
 8000328:	637b      	str	r3, [r7, #52]	@ 0x34
  /** Initializes the CPU, AHB and APB buses clocks
 800032a:	2302      	movs	r3, #2
 800032c:	63bb      	str	r3, [r7, #56]	@ 0x38
  */
 800032e:	2304      	movs	r3, #4
 8000330:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	2350      	movs	r3, #80	@ 0x50
 8000334:	643b      	str	r3, [r7, #64]	@ 0x40
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8000336:	2302      	movs	r3, #2
 8000338:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033a:	2308      	movs	r3, #8
 800033c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033e:	2302      	movs	r3, #2
 8000340:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000342:	f107 0318 	add.w	r3, r7, #24
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fcd4 	bl	8001cf4 <HAL_RCC_OscConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x66>
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

 8000352:	f000 f917 	bl	8000584 <Error_Handler>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}
 8000356:	230f      	movs	r3, #15
 8000358:	607b      	str	r3, [r7, #4]

/**
 800035a:	2303      	movs	r3, #3
 800035c:	60bb      	str	r3, [r7, #8]
  * @brief FDCAN1 Initialization Function
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
  * @param None
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  * @retval None
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
  */
static void MX_FDCAN1_Init(void)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2104      	movs	r1, #4
 800036e:	4618      	mov	r0, r3
 8000370:	f001 ffd2 	bl	8002318 <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x8e>
{

 800037a:	f000 f903 	bl	8000584 <Error_Handler>
  /* USER CODE BEGIN FDCAN1_Init 0 */
  FDCAN_FilterTypeDef filter_config;
 800037e:	bf00      	nop
 8000380:	3750      	adds	r7, #80	@ 0x50
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <MX_FDCAN1_Init>:
  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 32;
  hfdcan1.Init.NominalSyncJumpWidth = 3;
  hfdcan1.Init.NominalTimeSeg1 = 20;
  hfdcan1.Init.NominalTimeSeg2 = 4;
  hfdcan1.Init.DataPrescaler = 32;
 800038e:	4b3a      	ldr	r3, [pc, #232]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 8000390:	4a3a      	ldr	r2, [pc, #232]	@ (800047c <MX_FDCAN1_Init+0xf4>)
 8000392:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.DataSyncJumpWidth = 3;
 8000394:	4b38      	ldr	r3, [pc, #224]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 8000396:	2200      	movs	r2, #0
 8000398:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.DataTimeSeg1 = 20;
 800039a:	4b37      	ldr	r3, [pc, #220]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 800039c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003a0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.DataTimeSeg2 = 4;
 80003a2:	4b35      	ldr	r3, [pc, #212]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.StdFiltersNbr = 1;
 80003a8:	4b33      	ldr	r3, [pc, #204]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.ExtFiltersNbr = 0;
 80003ae:	4b32      	ldr	r3, [pc, #200]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80003b4:	4b30      	ldr	r3, [pc, #192]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	749a      	strb	r2, [r3, #18]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80003ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 80003bc:	2220      	movs	r2, #32
 80003be:	615a      	str	r2, [r3, #20]
  {
 80003c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 80003c2:	2203      	movs	r2, #3
 80003c4:	619a      	str	r2, [r3, #24]
    Error_Handler();
 80003c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 80003c8:	2214      	movs	r2, #20
 80003ca:	61da      	str	r2, [r3, #28]
  }
 80003cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 80003ce:	2204      	movs	r2, #4
 80003d0:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN FDCAN1_Init 2 */
 80003d2:	4b29      	ldr	r3, [pc, #164]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 80003d4:	2220      	movs	r2, #32
 80003d6:	625a      	str	r2, [r3, #36]	@ 0x24
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80003d8:	4b27      	ldr	r3, [pc, #156]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 80003da:	2203      	movs	r2, #3
 80003dc:	629a      	str	r2, [r3, #40]	@ 0x28
  filter_config.FilterID1 = 0x77;
 80003de:	4b26      	ldr	r3, [pc, #152]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 80003e0:	2214      	movs	r2, #20
 80003e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  filter_config.FilterID2 = 0x77;
 80003e4:	4b24      	ldr	r3, [pc, #144]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 80003e6:	2204      	movs	r2, #4
 80003e8:	631a      	str	r2, [r3, #48]	@ 0x30
  filter_config.FilterIndex = 0;
 80003ea:	4b23      	ldr	r3, [pc, #140]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	635a      	str	r2, [r3, #52]	@ 0x34
  filter_config.FilterType = FDCAN_FILTER_MASK;
 80003f0:	4b21      	ldr	r3, [pc, #132]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	639a      	str	r2, [r3, #56]	@ 0x38
  filter_config.IdType = FDCAN_STANDARD_ID;
 80003f6:	4b20      	ldr	r3, [pc, #128]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	63da      	str	r2, [r3, #60]	@ 0x3c

 80003fc:	481e      	ldr	r0, [pc, #120]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 80003fe:	f000 fb7f 	bl	8000b00 <HAL_FDCAN_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_FDCAN1_Init+0x84>
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config) != HAL_OK)
    {
 8000408:	f000 f8bc 	bl	8000584 <Error_Handler>
      /* Filter configuration Error */
      Error_Handler();
    }
 800040c:	2301      	movs	r3, #1
 800040e:	60fb      	str	r3, [r7, #12]

 8000410:	2377      	movs	r3, #119	@ 0x77
 8000412:	613b      	str	r3, [r7, #16]
  Tx_header.Identifier = 0x77;
 8000414:	2377      	movs	r3, #119	@ 0x77
 8000416:	617b      	str	r3, [r7, #20]
  Tx_header.IdType = FDCAN_STANDARD_ID;
 8000418:	2300      	movs	r3, #0
 800041a:	607b      	str	r3, [r7, #4]
  Tx_header.TxFrameType = FDCAN_DATA_FRAME;
 800041c:	2302      	movs	r3, #2
 800041e:	60bb      	str	r3, [r7, #8]
  Tx_header.DataLength = FDCAN_DLC_BYTES_12;
 8000420:	2300      	movs	r3, #0
 8000422:	603b      	str	r3, [r7, #0]
  Tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
  Tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8000424:	463b      	mov	r3, r7
 8000426:	4619      	mov	r1, r3
 8000428:	4813      	ldr	r0, [pc, #76]	@ (8000478 <MX_FDCAN1_Init+0xf0>)
 800042a:	f000 fcc3 	bl	8000db4 <HAL_FDCAN_ConfigFilter>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_FDCAN1_Init+0xb0>
  Tx_header.FDFormat = FDCAN_FD_CAN;
  Tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
  Tx_header.MessageMarker = 0;
 8000434:	f000 f8a6 	bl	8000584 <Error_Handler>

  /* USER CODE END FDCAN1_Init 2 */

 8000438:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <MX_FDCAN1_Init+0xf8>)
 800043a:	2277      	movs	r2, #119	@ 0x77
 800043c:	601a      	str	r2, [r3, #0]
}
 800043e:	4b10      	ldr	r3, [pc, #64]	@ (8000480 <MX_FDCAN1_Init+0xf8>)
 8000440:	2200      	movs	r2, #0
 8000442:	605a      	str	r2, [r3, #4]

 8000444:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <MX_FDCAN1_Init+0xf8>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
/**
 800044a:	4b0d      	ldr	r3, [pc, #52]	@ (8000480 <MX_FDCAN1_Init+0xf8>)
 800044c:	2209      	movs	r2, #9
 800044e:	60da      	str	r2, [r3, #12]
  * @brief GPIO Initialization Function
 8000450:	4b0b      	ldr	r3, [pc, #44]	@ (8000480 <MX_FDCAN1_Init+0xf8>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  * @param None
 8000456:	4b0a      	ldr	r3, [pc, #40]	@ (8000480 <MX_FDCAN1_Init+0xf8>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  * @retval None
 800045c:	4b08      	ldr	r3, [pc, #32]	@ (8000480 <MX_FDCAN1_Init+0xf8>)
 800045e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000462:	619a      	str	r2, [r3, #24]
  */
 8000464:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <MX_FDCAN1_Init+0xf8>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
static void MX_GPIO_Init(void)
 800046a:	4b05      	ldr	r3, [pc, #20]	@ (8000480 <MX_FDCAN1_Init+0xf8>)
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

 8000470:	bf00      	nop
 8000472:	3718      	adds	r7, #24
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000064 	.word	0x20000064
 800047c:	40006400 	.word	0x40006400
 8000480:	20000040 	.word	0x20000040

08000484 <MX_GPIO_Init>:
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	@ 0x28
 8000488:	af00      	add	r7, sp, #0
  /*Configure GPIO pin Output Level */
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	4b38      	ldr	r3, [pc, #224]	@ (800057c <MX_GPIO_Init+0xf8>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049e:	4a37      	ldr	r2, [pc, #220]	@ (800057c <MX_GPIO_Init+0xf8>)
 80004a0:	f043 0304 	orr.w	r3, r3, #4
 80004a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004a6:	4b35      	ldr	r3, [pc, #212]	@ (800057c <MX_GPIO_Init+0xf8>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004aa:	f003 0304 	and.w	r3, r3, #4
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004b2:	4b32      	ldr	r3, [pc, #200]	@ (800057c <MX_GPIO_Init+0xf8>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b6:	4a31      	ldr	r2, [pc, #196]	@ (800057c <MX_GPIO_Init+0xf8>)
 80004b8:	f043 0320 	orr.w	r3, r3, #32
 80004bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004be:	4b2f      	ldr	r3, [pc, #188]	@ (800057c <MX_GPIO_Init+0xf8>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c2:	f003 0320 	and.w	r3, r3, #32
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]

 80004ca:	4b2c      	ldr	r3, [pc, #176]	@ (800057c <MX_GPIO_Init+0xf8>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ce:	4a2b      	ldr	r2, [pc, #172]	@ (800057c <MX_GPIO_Init+0xf8>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004d6:	4b29      	ldr	r3, [pc, #164]	@ (800057c <MX_GPIO_Init+0xf8>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
 80004e2:	4b26      	ldr	r3, [pc, #152]	@ (800057c <MX_GPIO_Init+0xf8>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e6:	4a25      	ldr	r2, [pc, #148]	@ (800057c <MX_GPIO_Init+0xf8>)
 80004e8:	f043 0302 	orr.w	r3, r3, #2
 80004ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ee:	4b23      	ldr	r3, [pc, #140]	@ (800057c <MX_GPIO_Init+0xf8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f2:	f003 0302 	and.w	r3, r3, #2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2200      	movs	r2, #0
 80004fc:	2120      	movs	r1, #32
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000502:	f001 fb07 	bl	8001b14 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000506:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800050a:	617b      	str	r3, [r7, #20]

 800050c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000510:	61bb      	str	r3, [r7, #24]
  /*Configure GPIO pin : LD2_Pin */
 8000512:	2300      	movs	r3, #0
 8000514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pin = LD2_Pin;
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	4619      	mov	r1, r3
 800051c:	4818      	ldr	r0, [pc, #96]	@ (8000580 <MX_GPIO_Init+0xfc>)
 800051e:	f001 f977 	bl	8001810 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	230c      	movs	r3, #12
 8000524:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000526:	2302      	movs	r3, #2
 8000528:	61bb      	str	r3, [r7, #24]

 800052a:	2300      	movs	r3, #0
 800052c:	61fb      	str	r3, [r7, #28]
  /* EXTI interrupt init*/
 800052e:	2300      	movs	r3, #0
 8000530:	623b      	str	r3, [r7, #32]
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000532:	230c      	movs	r3, #12
 8000534:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	4619      	mov	r1, r3
 800053c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000540:	f001 f966 	bl	8001810 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

 8000544:	2320      	movs	r3, #32
 8000546:	617b      	str	r3, [r7, #20]
  /* USER CODE END MX_GPIO_Init_2 */
 8000548:	2301      	movs	r3, #1
 800054a:	61bb      	str	r3, [r7, #24]
}
 800054c:	2300      	movs	r3, #0
 800054e:	61fb      	str	r3, [r7, #28]

 8000550:	2300      	movs	r3, #0
 8000552:	623b      	str	r3, [r7, #32]
/* USER CODE BEGIN 4 */
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	4619      	mov	r1, r3
 800055a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800055e:	f001 f957 	bl	8001810 <HAL_GPIO_Init>

/* USER CODE END 4 */

 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	2028      	movs	r0, #40	@ 0x28
 8000568:	f000 fa95 	bl	8000a96 <HAL_NVIC_SetPriority>
/**
 800056c:	2028      	movs	r0, #40	@ 0x28
 800056e:	f000 faac 	bl	8000aca <HAL_NVIC_EnableIRQ>
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000572:	bf00      	nop
 8000574:	3728      	adds	r7, #40	@ 0x28
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000
 8000580:	48000800 	.word	0x48000800

08000584 <Error_Handler>:
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000588:	b672      	cpsid	i
}
 800058a:	bf00      	nop
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <Error_Handler+0x8>

08000590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000596:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <HAL_MspInit+0x44>)
 8000598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800059a:	4a0e      	ldr	r2, [pc, #56]	@ (80005d4 <HAL_MspInit+0x44>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80005a2:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <HAL_MspInit+0x44>)
 80005a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <HAL_MspInit+0x44>)
 80005b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005b2:	4a08      	ldr	r2, [pc, #32]	@ (80005d4 <HAL_MspInit+0x44>)
 80005b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_MspInit+0x44>)
 80005bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005c6:	f001 fb85 	bl	8001cd4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000

080005d8 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b09e      	sub	sp, #120	@ 0x78
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	2250      	movs	r2, #80	@ 0x50
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 faad 	bl	8002b58 <memset>
  if(hfdcan->Instance==FDCAN1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a28      	ldr	r2, [pc, #160]	@ (80006a4 <HAL_FDCAN_MspInit+0xcc>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d149      	bne.n	800069c <HAL_FDCAN_MspInit+0xc4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800060c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800060e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000612:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4618      	mov	r0, r3
 800061a:	f002 f861 	bl	80026e0 <HAL_RCCEx_PeriphCLKConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000624:	f7ff ffae 	bl	8000584 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <HAL_FDCAN_MspInit+0xd0>)
 800062a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800062c:	4a1e      	ldr	r2, [pc, #120]	@ (80006a8 <HAL_FDCAN_MspInit+0xd0>)
 800062e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000632:	6593      	str	r3, [r2, #88]	@ 0x58
 8000634:	4b1c      	ldr	r3, [pc, #112]	@ (80006a8 <HAL_FDCAN_MspInit+0xd0>)
 8000636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000640:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <HAL_FDCAN_MspInit+0xd0>)
 8000642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000644:	4a18      	ldr	r2, [pc, #96]	@ (80006a8 <HAL_FDCAN_MspInit+0xd0>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064c:	4b16      	ldr	r3, [pc, #88]	@ (80006a8 <HAL_FDCAN_MspInit+0xd0>)
 800064e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8000658:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800065c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800066a:	2309      	movs	r3, #9
 800066c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000672:	4619      	mov	r1, r3
 8000674:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000678:	f001 f8ca 	bl	8001810 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	2015      	movs	r0, #21
 8000682:	f000 fa08 	bl	8000a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000686:	2015      	movs	r0, #21
 8000688:	f000 fa1f 	bl	8000aca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	2100      	movs	r1, #0
 8000690:	2016      	movs	r0, #22
 8000692:	f000 fa00 	bl	8000a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000696:	2016      	movs	r0, #22
 8000698:	f000 fa17 	bl	8000aca <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800069c:	bf00      	nop
 800069e:	3778      	adds	r7, #120	@ 0x78
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40006400 	.word	0x40006400
 80006a8:	40021000 	.word	0x40021000

080006ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <NMI_Handler+0x4>

080006b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <HardFault_Handler+0x4>

080006bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <MemManage_Handler+0x4>

080006c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <BusFault_Handler+0x4>

080006cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <UsageFault_Handler+0x4>

080006d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000702:	f000 f8ad 	bl	8000860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000710:	4802      	ldr	r0, [pc, #8]	@ (800071c <FDCAN1_IT0_IRQHandler+0x10>)
 8000712:	f000 fe03 	bl	800131c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000064 	.word	0x20000064

08000720 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000724:	4802      	ldr	r0, [pc, #8]	@ (8000730 <FDCAN1_IT1_IRQHandler+0x10>)
 8000726:	f000 fdf9 	bl	800131c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000064 	.word	0x20000064

08000734 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000738:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800073c:	f001 fa02 	bl	8001b44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <SystemInit+0x20>)
 800074a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800074e:	4a05      	ldr	r2, [pc, #20]	@ (8000764 <SystemInit+0x20>)
 8000750:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000754:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000768:	480d      	ldr	r0, [pc, #52]	@ (80007a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800076a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800076c:	f7ff ffea 	bl	8000744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000770:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000772:	490d      	ldr	r1, [pc, #52]	@ (80007a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000774:	4a0d      	ldr	r2, [pc, #52]	@ (80007ac <LoopForever+0xe>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0a      	ldr	r2, [pc, #40]	@ (80007b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000788:	4c0a      	ldr	r4, [pc, #40]	@ (80007b4 <LoopForever+0x16>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000796:	f002 f9e7 	bl	8002b68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800079a:	f7ff fd63 	bl	8000264 <main>

0800079e <LoopForever>:

LoopForever:
    b LoopForever
 800079e:	e7fe      	b.n	800079e <LoopForever>
  ldr   r0, =_estack
 80007a0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007ac:	08002bf0 	.word	0x08002bf0
  ldr r2, =_sbss
 80007b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007b4:	200000cc 	.word	0x200000cc

080007b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC1_2_IRQHandler>

080007ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007c0:	2300      	movs	r3, #0
 80007c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f95b 	bl	8000a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 f80e 	bl	80007ec <HAL_InitTick>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d002      	beq.n	80007dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	71fb      	strb	r3, [r7, #7]
 80007da:	e001      	b.n	80007e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007dc:	f7ff fed8 	bl	8000590 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007e0:	79fb      	ldrb	r3, [r7, #7]

}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007f4:	2300      	movs	r3, #0
 80007f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <HAL_InitTick+0x68>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d022      	beq.n	8000846 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000800:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <HAL_InitTick+0x6c>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <HAL_InitTick+0x68>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800080c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000810:	fbb2 f3f3 	udiv	r3, r2, r3
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f966 	bl	8000ae6 <HAL_SYSTICK_Config>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10f      	bne.n	8000840 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b0f      	cmp	r3, #15
 8000824:	d809      	bhi.n	800083a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000826:	2200      	movs	r2, #0
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	f04f 30ff 	mov.w	r0, #4294967295
 800082e:	f000 f932 	bl	8000a96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000832:	4a0a      	ldr	r2, [pc, #40]	@ (800085c <HAL_InitTick+0x70>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	e007      	b.n	800084a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	e004      	b.n	800084a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000840:	2301      	movs	r3, #1
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e001      	b.n	800084a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800084a:	7bfb      	ldrb	r3, [r7, #15]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000008 	.word	0x20000008
 8000858:	20000000 	.word	0x20000000
 800085c:	20000004 	.word	0x20000004

08000860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000864:	4b05      	ldr	r3, [pc, #20]	@ (800087c <HAL_IncTick+0x1c>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <HAL_IncTick+0x20>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4413      	add	r3, r2
 800086e:	4a03      	ldr	r2, [pc, #12]	@ (800087c <HAL_IncTick+0x1c>)
 8000870:	6013      	str	r3, [r2, #0]
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	200000c8 	.word	0x200000c8
 8000880:	20000008 	.word	0x20000008

08000884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return uwTick;
 8000888:	4b03      	ldr	r3, [pc, #12]	@ (8000898 <HAL_GetTick+0x14>)
 800088a:	681b      	ldr	r3, [r3, #0]
}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	200000c8 	.word	0x200000c8

0800089c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a4:	f7ff ffee 	bl	8000884 <HAL_GetTick>
 80008a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b4:	d004      	beq.n	80008c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <HAL_Delay+0x40>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008c0:	bf00      	nop
 80008c2:	f7ff ffdf 	bl	8000884 <HAL_GetTick>
 80008c6:	4602      	mov	r2, r0
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d8f7      	bhi.n	80008c2 <HAL_Delay+0x26>
  {
  }
}
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000008 	.word	0x20000008

080008e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008fc:	4013      	ands	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000908:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800090c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000912:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	60d3      	str	r3, [r2, #12]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800092c:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <__NVIC_GetPriorityGrouping+0x18>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	f003 0307 	and.w	r3, r3, #7
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	2b00      	cmp	r3, #0
 8000954:	db0b      	blt.n	800096e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	f003 021f 	and.w	r2, r3, #31
 800095c:	4907      	ldr	r1, [pc, #28]	@ (800097c <__NVIC_EnableIRQ+0x38>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	095b      	lsrs	r3, r3, #5
 8000964:	2001      	movs	r0, #1
 8000966:	fa00 f202 	lsl.w	r2, r0, r2
 800096a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000e100 	.word	0xe000e100

08000980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	6039      	str	r1, [r7, #0]
 800098a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000990:	2b00      	cmp	r3, #0
 8000992:	db0a      	blt.n	80009aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	b2da      	uxtb	r2, r3
 8000998:	490c      	ldr	r1, [pc, #48]	@ (80009cc <__NVIC_SetPriority+0x4c>)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	0112      	lsls	r2, r2, #4
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	440b      	add	r3, r1
 80009a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a8:	e00a      	b.n	80009c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4908      	ldr	r1, [pc, #32]	@ (80009d0 <__NVIC_SetPriority+0x50>)
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	f003 030f 	and.w	r3, r3, #15
 80009b6:	3b04      	subs	r3, #4
 80009b8:	0112      	lsls	r2, r2, #4
 80009ba:	b2d2      	uxtb	r2, r2
 80009bc:	440b      	add	r3, r1
 80009be:	761a      	strb	r2, [r3, #24]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000e100 	.word	0xe000e100
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b089      	sub	sp, #36	@ 0x24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	f1c3 0307 	rsb	r3, r3, #7
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	bf28      	it	cs
 80009f2:	2304      	movcs	r3, #4
 80009f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3304      	adds	r3, #4
 80009fa:	2b06      	cmp	r3, #6
 80009fc:	d902      	bls.n	8000a04 <NVIC_EncodePriority+0x30>
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3b03      	subs	r3, #3
 8000a02:	e000      	b.n	8000a06 <NVIC_EncodePriority+0x32>
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43da      	mvns	r2, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	401a      	ands	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	fa01 f303 	lsl.w	r3, r1, r3
 8000a26:	43d9      	mvns	r1, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	4313      	orrs	r3, r2
         );
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3724      	adds	r7, #36	@ 0x24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a4c:	d301      	bcc.n	8000a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00f      	b.n	8000a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a52:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <SysTick_Config+0x40>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f7ff ff8e 	bl	8000980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a64:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <SysTick_Config+0x40>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6a:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <SysTick_Config+0x40>)
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	e000e010 	.word	0xe000e010

08000a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff29 	bl	80008e0 <__NVIC_SetPriorityGrouping>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa4:	f7ff ff40 	bl	8000928 <__NVIC_GetPriorityGrouping>
 8000aa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	68b9      	ldr	r1, [r7, #8]
 8000aae:	6978      	ldr	r0, [r7, #20]
 8000ab0:	f7ff ff90 	bl	80009d4 <NVIC_EncodePriority>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff5f 	bl	8000980 <__NVIC_SetPriority>
}
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff33 	bl	8000944 <__NVIC_EnableIRQ>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff ffa4 	bl	8000a3c <SysTick_Config>
 8000af4:	4603      	mov	r3, r0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e147      	b.n	8000da2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d106      	bne.n	8000b2c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff fd56 	bl	80005d8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	699a      	ldr	r2, [r3, #24]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f022 0210 	bic.w	r2, r2, #16
 8000b3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b3c:	f7ff fea2 	bl	8000884 <HAL_GetTick>
 8000b40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000b42:	e012      	b.n	8000b6a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000b44:	f7ff fe9e 	bl	8000884 <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	2b0a      	cmp	r3, #10
 8000b50:	d90b      	bls.n	8000b6a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b56:	f043 0201 	orr.w	r2, r3, #1
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2203      	movs	r2, #3
 8000b62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e11b      	b.n	8000da2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0308 	and.w	r3, r3, #8
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	d0e5      	beq.n	8000b44 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	699a      	ldr	r2, [r3, #24]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f042 0201 	orr.w	r2, r2, #1
 8000b86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b88:	f7ff fe7c 	bl	8000884 <HAL_GetTick>
 8000b8c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000b8e:	e012      	b.n	8000bb6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000b90:	f7ff fe78 	bl	8000884 <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	2b0a      	cmp	r3, #10
 8000b9c:	d90b      	bls.n	8000bb6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ba2:	f043 0201 	orr.w	r2, r3, #1
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2203      	movs	r2, #3
 8000bae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e0f5      	b.n	8000da2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d0e5      	beq.n	8000b90 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	699a      	ldr	r2, [r3, #24]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f042 0202 	orr.w	r2, r2, #2
 8000bd2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a74      	ldr	r2, [pc, #464]	@ (8000dac <HAL_FDCAN_Init+0x2ac>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d103      	bne.n	8000be6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000bde:	4a74      	ldr	r2, [pc, #464]	@ (8000db0 <HAL_FDCAN_Init+0x2b0>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7c1b      	ldrb	r3, [r3, #16]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d108      	bne.n	8000c00 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	699a      	ldr	r2, [r3, #24]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000bfc:	619a      	str	r2, [r3, #24]
 8000bfe:	e007      	b.n	8000c10 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	699a      	ldr	r2, [r3, #24]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000c0e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7c5b      	ldrb	r3, [r3, #17]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d108      	bne.n	8000c2a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	699a      	ldr	r2, [r3, #24]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000c26:	619a      	str	r2, [r3, #24]
 8000c28:	e007      	b.n	8000c3a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	699a      	ldr	r2, [r3, #24]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000c38:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7c9b      	ldrb	r3, [r3, #18]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d108      	bne.n	8000c54 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	699a      	ldr	r2, [r3, #24]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000c50:	619a      	str	r2, [r3, #24]
 8000c52:	e007      	b.n	8000c64 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	699a      	ldr	r2, [r3, #24]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000c62:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	430a      	orrs	r2, r1
 8000c78:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	699a      	ldr	r2, [r3, #24]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000c88:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	691a      	ldr	r2, [r3, #16]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 0210 	bic.w	r2, r2, #16
 8000c98:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d108      	bne.n	8000cb4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	699a      	ldr	r2, [r3, #24]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f042 0204 	orr.w	r2, r2, #4
 8000cb0:	619a      	str	r2, [r3, #24]
 8000cb2:	e02c      	b.n	8000d0e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d028      	beq.n	8000d0e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d01c      	beq.n	8000cfe <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	699a      	ldr	r2, [r3, #24]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000cd2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	691a      	ldr	r2, [r3, #16]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f042 0210 	orr.w	r2, r2, #16
 8000ce2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d110      	bne.n	8000d0e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	699a      	ldr	r2, [r3, #24]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f042 0220 	orr.w	r2, r2, #32
 8000cfa:	619a      	str	r2, [r3, #24]
 8000cfc:	e007      	b.n	8000d0e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	699a      	ldr	r2, [r3, #24]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f042 0220 	orr.w	r2, r2, #32
 8000d0c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d1e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000d26:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000d36:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d38:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000d42:	d115      	bne.n	8000d70 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d48:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000d52:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000d5c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d64:	3b01      	subs	r3, #1
 8000d66:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000d6c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000d6e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	430a      	orrs	r2, r1
 8000d82:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 fc64 	bl	8001654 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40006400 	.word	0x40006400
 8000db0:	40006500 	.word	0x40006500

08000db4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000dc4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000dc6:	7dfb      	ldrb	r3, [r7, #23]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d002      	beq.n	8000dd2 <HAL_FDCAN_ConfigFilter+0x1e>
 8000dcc:	7dfb      	ldrb	r3, [r7, #23]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d13d      	bne.n	8000e4e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d119      	bne.n	8000e0e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000de6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8000dee:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	e01d      	b.n	8000e4a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	075a      	lsls	r2, r3, #29
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	079a      	lsls	r2, r3, #30
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	4413      	add	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	3304      	adds	r3, #4
 8000e42:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e006      	b.n	8000e5c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e52:	f043 0202 	orr.w	r2, r3, #2
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
  }
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	371c      	adds	r7, #28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d110      	bne.n	8000e9e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2202      	movs	r2, #2
 8000e80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	699a      	ldr	r2, [r3, #24]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0201 	bic.w	r2, r2, #1
 8000e92:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e006      	b.n	8000eac <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea2:	f043 0204 	orr.w	r2, r3, #4
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
  }
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d12c      	bne.n	8000f2a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d007      	beq.n	8000ef0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e023      	b.n	8000f38 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000ef8:	0c1b      	lsrs	r3, r3, #16
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f000 fc06 	bl	8001718 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	fa01 f202 	lsl.w	r2, r1, r2
 8000f18:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	409a      	lsls	r2, r3
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e006      	b.n	8000f38 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2e:	f043 0208 	orr.w	r2, r3, #8
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
  }
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b08b      	sub	sp, #44	@ 0x2c
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000f58:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8000f5a:	7efb      	ldrb	r3, [r7, #27]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	f040 80e8 	bne.w	8001132 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	2b40      	cmp	r3, #64	@ 0x40
 8000f66:	d137      	bne.n	8000fd8 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d107      	bne.n	8000f88 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e0db      	b.n	8001140 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f98:	d10a      	bne.n	8000fb0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000faa:	d101      	bne.n	8000fb0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	69fa      	ldr	r2, [r7, #28]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	440b      	add	r3, r1
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fd6:	e036      	b.n	8001046 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000fe0:	f003 030f 	and.w	r3, r3, #15
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d107      	bne.n	8000ff8 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e0a3      	b.n	8001140 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001000:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001008:	d10a      	bne.n	8001020 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800101a:	d101      	bne.n	8001020 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800101c:	2301      	movs	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	4413      	add	r3, r2
 8001032:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001038:	69fa      	ldr	r2, [r7, #28]
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d107      	bne.n	800106a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	0c9b      	lsrs	r3, r3, #18
 8001060:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	e005      	b.n	8001076 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	3304      	adds	r3, #4
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	b29a      	uxth	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800109e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	0c1b      	lsrs	r3, r3, #16
 80010a4:	f003 020f 	and.w	r2, r3, #15
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80010ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80010b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	0e1b      	lsrs	r3, r3, #24
 80010ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	0fda      	lsrs	r2, r3, #31
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	3304      	adds	r3, #4
 80010e0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
 80010ea:	e00a      	b.n	8001102 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	441a      	add	r2, r3
 80010f2:	6839      	ldr	r1, [r7, #0]
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	440b      	add	r3, r1
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	3301      	adds	r3, #1
 8001100:	623b      	str	r3, [r7, #32]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	4a11      	ldr	r2, [pc, #68]	@ (800114c <HAL_FDCAN_GetRxMessage+0x20c>)
 8001108:	5cd3      	ldrb	r3, [r2, r3]
 800110a:	461a      	mov	r2, r3
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	4293      	cmp	r3, r2
 8001110:	d3ec      	bcc.n	80010ec <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	2b40      	cmp	r3, #64	@ 0x40
 8001116:	d105      	bne.n	8001124 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001122:	e004      	b.n	800112e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e006      	b.n	8001140 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001136:	f043 0208 	orr.w	r2, r3, #8
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
  }
}
 8001140:	4618      	mov	r0, r3
 8001142:	372c      	adds	r7, #44	@ 0x2c
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	08002bd8 	.word	0x08002bd8

08001150 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001162:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d003      	beq.n	8001172 <HAL_FDCAN_ActivateNotification+0x22>
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	2b02      	cmp	r3, #2
 800116e:	f040 80c8 	bne.w	8001302 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001178:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	2b00      	cmp	r3, #0
 8001182:	d004      	beq.n	800118e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d03b      	beq.n	8001206 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001194:	2b00      	cmp	r3, #0
 8001196:	d004      	beq.n	80011a2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d031      	beq.n	8001206 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d004      	beq.n	80011b6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d027      	beq.n	8001206 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d004      	beq.n	80011ca <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d01d      	beq.n	8001206 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d004      	beq.n	80011de <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	f003 0310 	and.w	r3, r3, #16
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d013      	beq.n	8001206 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d004      	beq.n	80011f2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	f003 0320 	and.w	r3, r3, #32
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d009      	beq.n	8001206 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00c      	beq.n	8001216 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001202:	2b00      	cmp	r3, #0
 8001204:	d107      	bne.n	8001216 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0201 	orr.w	r2, r2, #1
 8001214:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d13b      	bne.n	80012a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d131      	bne.n	80012a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001244:	2b00      	cmp	r3, #0
 8001246:	d004      	beq.n	8001252 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	2b00      	cmp	r3, #0
 8001250:	d127      	bne.n	80012a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d11d      	bne.n	80012a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	d113      	bne.n	80012a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	f003 0320 	and.w	r3, r3, #32
 800128a:	2b00      	cmp	r3, #0
 800128c:	d109      	bne.n	80012a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00c      	beq.n	80012b2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0202 	orr.w	r2, r2, #2
 80012b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d009      	beq.n	80012d0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d009      	beq.n	80012ee <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e006      	b.n	8001310 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001306:	f043 0202 	orr.w	r2, r3, #2
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
  }
}
 8001310:	4618      	mov	r0, r3
 8001312:	371c      	adds	r7, #28
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08c      	sub	sp, #48	@ 0x30
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800132a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800132e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001338:	4013      	ands	r3, r2
 800133a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800134e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001350:	4013      	ands	r3, r2
 8001352:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800135a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001368:	4013      	ands	r3, r2
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001372:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001376:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800137e:	6a3a      	ldr	r2, [r7, #32]
 8001380:	4013      	ands	r3, r2
 8001382:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800138a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800138e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	4013      	ands	r3, r2
 800139a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013aa:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	099b      	lsrs	r3, r3, #6
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00c      	beq.n	80013d2 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	099b      	lsrs	r3, r3, #6
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d006      	beq.n	80013d2 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2240      	movs	r2, #64	@ 0x40
 80013ca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f922 	bl	8001616 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d01a      	beq.n	8001414 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d014      	beq.n	8001414 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013f2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800140a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800140c:	6939      	ldr	r1, [r7, #16]
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f8e2 	bl	80015d8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001420:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001422:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f8ac 	bl	8001582 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800142a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001436:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001438:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7fe feec 	bl	8000218 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001442:	2b00      	cmp	r3, #0
 8001444:	d007      	beq.n	8001456 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800144c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800144e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 f8a1 	bl	8001598 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	0a5b      	lsrs	r3, r3, #9
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00d      	beq.n	800147e <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	0a5b      	lsrs	r3, r3, #9
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d007      	beq.n	800147e <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001476:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f898 	bl	80015ae <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	09db      	lsrs	r3, r3, #7
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d019      	beq.n	80014be <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	09db      	lsrs	r3, r3, #7
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d013      	beq.n	80014be <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800149e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	4013      	ands	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2280      	movs	r2, #128	@ 0x80
 80014b4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80014b6:	68f9      	ldr	r1, [r7, #12]
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 f882 	bl	80015c2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	0b5b      	lsrs	r3, r3, #13
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00d      	beq.n	80014e6 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	0b5b      	lsrs	r3, r3, #13
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014de:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 f884 	bl	80015ee <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	0bdb      	lsrs	r3, r3, #15
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00d      	beq.n	800150e <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	0bdb      	lsrs	r3, r3, #15
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d007      	beq.n	800150e <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001506:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 f87a 	bl	8001602 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	0b9b      	lsrs	r3, r3, #14
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d010      	beq.n	800153c <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	0b9b      	lsrs	r3, r3, #14
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00a      	beq.n	800153c <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800152e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001534:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d007      	beq.n	8001552 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800154a:	69f9      	ldr	r1, [r7, #28]
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f876 	bl	800163e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d009      	beq.n	800156c <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6a3a      	ldr	r2, [r7, #32]
 800155e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f858 	bl	800162a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800157a:	bf00      	nop
 800157c:	3730      	adds	r7, #48	@ 0x30
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800165c:	4b2c      	ldr	r3, [pc, #176]	@ (8001710 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800165e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a2b      	ldr	r2, [pc, #172]	@ (8001714 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d103      	bne.n	8001672 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001670:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001680:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001688:	041a      	lsls	r2, r3, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016a6:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ae:	061a      	lsls	r2, r3, #24
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	e005      	b.n	80016f4 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3304      	adds	r3, #4
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d3f3      	bcc.n	80016e8 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	4000a400 	.word	0x4000a400
 8001714:	40006800 	.word	0x40006800

08001718 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	@ 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10a      	bne.n	8001744 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001736:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800173e:	4313      	orrs	r3, r2
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	e00a      	b.n	800175a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800174c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001752:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001754:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001758:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001764:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800176a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001770:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	4613      	mov	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	3304      	adds	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	3304      	adds	r3, #4
 80017a4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	e020      	b.n	80017ee <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3303      	adds	r3, #3
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3302      	adds	r3, #2
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	440b      	add	r3, r1
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80017c4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3301      	adds	r3, #1
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	440b      	add	r3, r1
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80017d2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	440a      	add	r2, r1
 80017da:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80017dc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	3304      	adds	r3, #4
 80017e6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3304      	adds	r3, #4
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	4a06      	ldr	r2, [pc, #24]	@ (800180c <FDCAN_CopyMessageToRAM+0xf4>)
 80017f4:	5cd3      	ldrb	r3, [r2, r3]
 80017f6:	461a      	mov	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d3d6      	bcc.n	80017ac <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
 8001802:	3724      	adds	r7, #36	@ 0x24
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	08002bd8 	.word	0x08002bd8

08001810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800181e:	e15a      	b.n	8001ad6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2101      	movs	r1, #1
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 814c 	beq.w	8001ad0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d005      	beq.n	8001850 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800184c:	2b02      	cmp	r3, #2
 800184e:	d130      	bne.n	80018b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001886:	2201      	movs	r2, #1
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	091b      	lsrs	r3, r3, #4
 800189c:	f003 0201 	and.w	r2, r3, #1
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d017      	beq.n	80018ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2203      	movs	r2, #3
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d123      	bne.n	8001942 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	08da      	lsrs	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3208      	adds	r2, #8
 8001902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	220f      	movs	r2, #15
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	08da      	lsrs	r2, r3, #3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3208      	adds	r2, #8
 800193c:	6939      	ldr	r1, [r7, #16]
 800193e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0203 	and.w	r2, r3, #3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80a6 	beq.w	8001ad0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001984:	4b5b      	ldr	r3, [pc, #364]	@ (8001af4 <HAL_GPIO_Init+0x2e4>)
 8001986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001988:	4a5a      	ldr	r2, [pc, #360]	@ (8001af4 <HAL_GPIO_Init+0x2e4>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001990:	4b58      	ldr	r3, [pc, #352]	@ (8001af4 <HAL_GPIO_Init+0x2e4>)
 8001992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800199c:	4a56      	ldr	r2, [pc, #344]	@ (8001af8 <HAL_GPIO_Init+0x2e8>)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019c6:	d01f      	beq.n	8001a08 <HAL_GPIO_Init+0x1f8>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a4c      	ldr	r2, [pc, #304]	@ (8001afc <HAL_GPIO_Init+0x2ec>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d019      	beq.n	8001a04 <HAL_GPIO_Init+0x1f4>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a4b      	ldr	r2, [pc, #300]	@ (8001b00 <HAL_GPIO_Init+0x2f0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d013      	beq.n	8001a00 <HAL_GPIO_Init+0x1f0>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a4a      	ldr	r2, [pc, #296]	@ (8001b04 <HAL_GPIO_Init+0x2f4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d00d      	beq.n	80019fc <HAL_GPIO_Init+0x1ec>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a49      	ldr	r2, [pc, #292]	@ (8001b08 <HAL_GPIO_Init+0x2f8>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d007      	beq.n	80019f8 <HAL_GPIO_Init+0x1e8>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a48      	ldr	r2, [pc, #288]	@ (8001b0c <HAL_GPIO_Init+0x2fc>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d101      	bne.n	80019f4 <HAL_GPIO_Init+0x1e4>
 80019f0:	2305      	movs	r3, #5
 80019f2:	e00a      	b.n	8001a0a <HAL_GPIO_Init+0x1fa>
 80019f4:	2306      	movs	r3, #6
 80019f6:	e008      	b.n	8001a0a <HAL_GPIO_Init+0x1fa>
 80019f8:	2304      	movs	r3, #4
 80019fa:	e006      	b.n	8001a0a <HAL_GPIO_Init+0x1fa>
 80019fc:	2303      	movs	r3, #3
 80019fe:	e004      	b.n	8001a0a <HAL_GPIO_Init+0x1fa>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e002      	b.n	8001a0a <HAL_GPIO_Init+0x1fa>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <HAL_GPIO_Init+0x1fa>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	f002 0203 	and.w	r2, r2, #3
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	4093      	lsls	r3, r2
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a1a:	4937      	ldr	r1, [pc, #220]	@ (8001af8 <HAL_GPIO_Init+0x2e8>)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	3302      	adds	r3, #2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a28:	4b39      	ldr	r3, [pc, #228]	@ (8001b10 <HAL_GPIO_Init+0x300>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a4c:	4a30      	ldr	r2, [pc, #192]	@ (8001b10 <HAL_GPIO_Init+0x300>)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a52:	4b2f      	ldr	r3, [pc, #188]	@ (8001b10 <HAL_GPIO_Init+0x300>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a76:	4a26      	ldr	r2, [pc, #152]	@ (8001b10 <HAL_GPIO_Init+0x300>)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a7c:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <HAL_GPIO_Init+0x300>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b10 <HAL_GPIO_Init+0x300>)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b10 <HAL_GPIO_Init+0x300>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aca:	4a11      	ldr	r2, [pc, #68]	@ (8001b10 <HAL_GPIO_Init+0x300>)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f47f ae9d 	bne.w	8001820 <HAL_GPIO_Init+0x10>
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	371c      	adds	r7, #28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000
 8001afc:	48000400 	.word	0x48000400
 8001b00:	48000800 	.word	0x48000800
 8001b04:	48000c00 	.word	0x48000c00
 8001b08:	48001000 	.word	0x48001000
 8001b0c:	48001400 	.word	0x48001400
 8001b10:	40010400 	.word	0x40010400

08001b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
 8001b20:	4613      	mov	r3, r2
 8001b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b24:	787b      	ldrb	r3, [r7, #1]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b30:	e002      	b.n	8001b38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b32:	887a      	ldrh	r2, [r7, #2]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b4e:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b50:	695a      	ldr	r2, [r3, #20]
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d006      	beq.n	8001b68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b5a:	4a05      	ldr	r2, [pc, #20]	@ (8001b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 f806 	bl	8001b74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40010400 	.word	0x40010400

08001b74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d141      	bne.n	8001c1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ba6:	d131      	bne.n	8001c0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ba8:	4b47      	ldr	r3, [pc, #284]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bae:	4a46      	ldr	r2, [pc, #280]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb8:	4b43      	ldr	r3, [pc, #268]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bc0:	4a41      	ldr	r2, [pc, #260]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bc8:	4b40      	ldr	r3, [pc, #256]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2232      	movs	r2, #50	@ 0x32
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	4a3f      	ldr	r2, [pc, #252]	@ (8001cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	0c9b      	lsrs	r3, r3, #18
 8001bda:	3301      	adds	r3, #1
 8001bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bde:	e002      	b.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be6:	4b38      	ldr	r3, [pc, #224]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf2:	d102      	bne.n	8001bfa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f2      	bne.n	8001be0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bfa:	4b33      	ldr	r3, [pc, #204]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c06:	d158      	bne.n	8001cba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e057      	b.n	8001cbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c12:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c1c:	e04d      	b.n	8001cba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c24:	d141      	bne.n	8001caa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c26:	4b28      	ldr	r3, [pc, #160]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c32:	d131      	bne.n	8001c98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c34:	4b24      	ldr	r3, [pc, #144]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c3a:	4a23      	ldr	r2, [pc, #140]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c44:	4b20      	ldr	r3, [pc, #128]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2232      	movs	r2, #50	@ 0x32
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	0c9b      	lsrs	r3, r3, #18
 8001c66:	3301      	adds	r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c6a:	e002      	b.n	8001c72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c7e:	d102      	bne.n	8001c86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f2      	bne.n	8001c6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c92:	d112      	bne.n	8001cba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e011      	b.n	8001cbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c98:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ca8:	e007      	b.n	8001cba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001caa:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cb2:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	431bde83 	.word	0x431bde83

08001cd4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4a04      	ldr	r2, [pc, #16]	@ (8001cf0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce2:	6093      	str	r3, [r2, #8]
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40007000 	.word	0x40007000

08001cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e2fe      	b.n	8002304 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d075      	beq.n	8001dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d12:	4b97      	ldr	r3, [pc, #604]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d1c:	4b94      	ldr	r3, [pc, #592]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b0c      	cmp	r3, #12
 8001d2a:	d102      	bne.n	8001d32 <HAL_RCC_OscConfig+0x3e>
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d002      	beq.n	8001d38 <HAL_RCC_OscConfig+0x44>
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d10b      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d38:	4b8d      	ldr	r3, [pc, #564]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d05b      	beq.n	8001dfc <HAL_RCC_OscConfig+0x108>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d157      	bne.n	8001dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e2d9      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d58:	d106      	bne.n	8001d68 <HAL_RCC_OscConfig+0x74>
 8001d5a:	4b85      	ldr	r3, [pc, #532]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a84      	ldr	r2, [pc, #528]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e01d      	b.n	8001da4 <HAL_RCC_OscConfig+0xb0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x98>
 8001d72:	4b7f      	ldr	r3, [pc, #508]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a7e      	ldr	r2, [pc, #504]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001d78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a7b      	ldr	r2, [pc, #492]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e00b      	b.n	8001da4 <HAL_RCC_OscConfig+0xb0>
 8001d8c:	4b78      	ldr	r3, [pc, #480]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a77      	ldr	r2, [pc, #476]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b75      	ldr	r3, [pc, #468]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a74      	ldr	r2, [pc, #464]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001d9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7fe fd6a 	bl	8000884 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db4:	f7fe fd66 	bl	8000884 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	@ 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e29e      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0xc0>
 8001dd2:	e014      	b.n	8001dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7fe fd56 	bl	8000884 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7fe fd52 	bl	8000884 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	@ 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e28a      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dee:	4b60      	ldr	r3, [pc, #384]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0xe8>
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d075      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e0a:	4b59      	ldr	r3, [pc, #356]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e14:	4b56      	ldr	r3, [pc, #344]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	2b0c      	cmp	r3, #12
 8001e22:	d102      	bne.n	8001e2a <HAL_RCC_OscConfig+0x136>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d002      	beq.n	8001e30 <HAL_RCC_OscConfig+0x13c>
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d11f      	bne.n	8001e70 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e30:	4b4f      	ldr	r3, [pc, #316]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_OscConfig+0x154>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e25d      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e48:	4b49      	ldr	r3, [pc, #292]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	061b      	lsls	r3, r3, #24
 8001e56:	4946      	ldr	r1, [pc, #280]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e5c:	4b45      	ldr	r3, [pc, #276]	@ (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fcc3 	bl	80007ec <HAL_InitTick>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d043      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e249      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d023      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e78:	4b3d      	ldr	r3, [pc, #244]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7fe fcfe 	bl	8000884 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8c:	f7fe fcfa 	bl	8000884 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e232      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e9e:	4b34      	ldr	r3, [pc, #208]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eaa:	4b31      	ldr	r3, [pc, #196]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	061b      	lsls	r3, r3, #24
 8001eb8:	492d      	ldr	r1, [pc, #180]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
 8001ebe:	e01a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001ec6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7fe fcda 	bl	8000884 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed4:	f7fe fcd6 	bl	8000884 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e20e      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee6:	4b22      	ldr	r3, [pc, #136]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x1e0>
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ef4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d041      	beq.n	8001f86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d01c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0a:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f10:	4a17      	ldr	r2, [pc, #92]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1a:	f7fe fcb3 	bl	8000884 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f22:	f7fe fcaf 	bl	8000884 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e1e7      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f34:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0ef      	beq.n	8001f22 <HAL_RCC_OscConfig+0x22e>
 8001f42:	e020      	b.n	8001f86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f44:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f4a:	4a09      	ldr	r2, [pc, #36]	@ (8001f70 <HAL_RCC_OscConfig+0x27c>)
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f54:	f7fe fc96 	bl	8000884 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f5a:	e00d      	b.n	8001f78 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5c:	f7fe fc92 	bl	8000884 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d906      	bls.n	8001f78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1ca      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f78:	4b8c      	ldr	r3, [pc, #560]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8001f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1ea      	bne.n	8001f5c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80a6 	beq.w	80020e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f94:	2300      	movs	r3, #0
 8001f96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f98:	4b84      	ldr	r3, [pc, #528]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x2b4>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x2b6>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00d      	beq.n	8001fca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	4b7f      	ldr	r3, [pc, #508]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb2:	4a7e      	ldr	r2, [pc, #504]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fba:	4b7c      	ldr	r3, [pc, #496]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fca:	4b79      	ldr	r3, [pc, #484]	@ (80021b0 <HAL_RCC_OscConfig+0x4bc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d118      	bne.n	8002008 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd6:	4b76      	ldr	r3, [pc, #472]	@ (80021b0 <HAL_RCC_OscConfig+0x4bc>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a75      	ldr	r2, [pc, #468]	@ (80021b0 <HAL_RCC_OscConfig+0x4bc>)
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe2:	f7fe fc4f 	bl	8000884 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fea:	f7fe fc4b 	bl	8000884 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e183      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ffc:	4b6c      	ldr	r3, [pc, #432]	@ (80021b0 <HAL_RCC_OscConfig+0x4bc>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d108      	bne.n	8002022 <HAL_RCC_OscConfig+0x32e>
 8002010:	4b66      	ldr	r3, [pc, #408]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002016:	4a65      	ldr	r2, [pc, #404]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002020:	e024      	b.n	800206c <HAL_RCC_OscConfig+0x378>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b05      	cmp	r3, #5
 8002028:	d110      	bne.n	800204c <HAL_RCC_OscConfig+0x358>
 800202a:	4b60      	ldr	r3, [pc, #384]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002030:	4a5e      	ldr	r2, [pc, #376]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800203a:	4b5c      	ldr	r3, [pc, #368]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002040:	4a5a      	ldr	r2, [pc, #360]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800204a:	e00f      	b.n	800206c <HAL_RCC_OscConfig+0x378>
 800204c:	4b57      	ldr	r3, [pc, #348]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002052:	4a56      	ldr	r2, [pc, #344]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800205c:	4b53      	ldr	r3, [pc, #332]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002062:	4a52      	ldr	r2, [pc, #328]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d016      	beq.n	80020a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002074:	f7fe fc06 	bl	8000884 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207a:	e00a      	b.n	8002092 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207c:	f7fe fc02 	bl	8000884 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e138      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002092:	4b46      	ldr	r3, [pc, #280]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0ed      	beq.n	800207c <HAL_RCC_OscConfig+0x388>
 80020a0:	e015      	b.n	80020ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a2:	f7fe fbef 	bl	8000884 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020a8:	e00a      	b.n	80020c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020aa:	f7fe fbeb 	bl	8000884 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e121      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c0:	4b3a      	ldr	r3, [pc, #232]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1ed      	bne.n	80020aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020ce:	7ffb      	ldrb	r3, [r7, #31]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d4:	4b35      	ldr	r3, [pc, #212]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d8:	4a34      	ldr	r2, [pc, #208]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 80020da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d03c      	beq.n	8002166 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01c      	beq.n	800212e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020f4:	4b2d      	ldr	r3, [pc, #180]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 80020f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020fa:	4a2c      	ldr	r2, [pc, #176]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002104:	f7fe fbbe 	bl	8000884 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800210c:	f7fe fbba 	bl	8000884 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e0f2      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800211e:	4b23      	ldr	r3, [pc, #140]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8002120:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ef      	beq.n	800210c <HAL_RCC_OscConfig+0x418>
 800212c:	e01b      	b.n	8002166 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800212e:	4b1f      	ldr	r3, [pc, #124]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8002130:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002134:	4a1d      	ldr	r2, [pc, #116]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8002136:	f023 0301 	bic.w	r3, r3, #1
 800213a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213e:	f7fe fba1 	bl	8000884 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002146:	f7fe fb9d 	bl	8000884 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e0d5      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002158:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 800215a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1ef      	bne.n	8002146 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80c9 	beq.w	8002302 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002170:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b0c      	cmp	r3, #12
 800217a:	f000 8083 	beq.w	8002284 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d15e      	bne.n	8002244 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002186:	4b09      	ldr	r3, [pc, #36]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a08      	ldr	r2, [pc, #32]	@ (80021ac <HAL_RCC_OscConfig+0x4b8>)
 800218c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7fe fb77 	bl	8000884 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002198:	e00c      	b.n	80021b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219a:	f7fe fb73 	bl	8000884 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d905      	bls.n	80021b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e0ab      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b4:	4b55      	ldr	r3, [pc, #340]	@ (800230c <HAL_RCC_OscConfig+0x618>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ec      	bne.n	800219a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c0:	4b52      	ldr	r3, [pc, #328]	@ (800230c <HAL_RCC_OscConfig+0x618>)
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	4b52      	ldr	r3, [pc, #328]	@ (8002310 <HAL_RCC_OscConfig+0x61c>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6a11      	ldr	r1, [r2, #32]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021d0:	3a01      	subs	r2, #1
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	4311      	orrs	r1, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80021da:	0212      	lsls	r2, r2, #8
 80021dc:	4311      	orrs	r1, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80021e2:	0852      	lsrs	r2, r2, #1
 80021e4:	3a01      	subs	r2, #1
 80021e6:	0552      	lsls	r2, r2, #21
 80021e8:	4311      	orrs	r1, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021ee:	0852      	lsrs	r2, r2, #1
 80021f0:	3a01      	subs	r2, #1
 80021f2:	0652      	lsls	r2, r2, #25
 80021f4:	4311      	orrs	r1, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021fa:	06d2      	lsls	r2, r2, #27
 80021fc:	430a      	orrs	r2, r1
 80021fe:	4943      	ldr	r1, [pc, #268]	@ (800230c <HAL_RCC_OscConfig+0x618>)
 8002200:	4313      	orrs	r3, r2
 8002202:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002204:	4b41      	ldr	r3, [pc, #260]	@ (800230c <HAL_RCC_OscConfig+0x618>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a40      	ldr	r2, [pc, #256]	@ (800230c <HAL_RCC_OscConfig+0x618>)
 800220a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800220e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002210:	4b3e      	ldr	r3, [pc, #248]	@ (800230c <HAL_RCC_OscConfig+0x618>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4a3d      	ldr	r2, [pc, #244]	@ (800230c <HAL_RCC_OscConfig+0x618>)
 8002216:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800221a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7fe fb32 	bl	8000884 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002224:	f7fe fb2e 	bl	8000884 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e066      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002236:	4b35      	ldr	r3, [pc, #212]	@ (800230c <HAL_RCC_OscConfig+0x618>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x530>
 8002242:	e05e      	b.n	8002302 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002244:	4b31      	ldr	r3, [pc, #196]	@ (800230c <HAL_RCC_OscConfig+0x618>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a30      	ldr	r2, [pc, #192]	@ (800230c <HAL_RCC_OscConfig+0x618>)
 800224a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800224e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7fe fb18 	bl	8000884 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe fb14 	bl	8000884 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e04c      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800226a:	4b28      	ldr	r3, [pc, #160]	@ (800230c <HAL_RCC_OscConfig+0x618>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002276:	4b25      	ldr	r3, [pc, #148]	@ (800230c <HAL_RCC_OscConfig+0x618>)
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	4924      	ldr	r1, [pc, #144]	@ (800230c <HAL_RCC_OscConfig+0x618>)
 800227c:	4b25      	ldr	r3, [pc, #148]	@ (8002314 <HAL_RCC_OscConfig+0x620>)
 800227e:	4013      	ands	r3, r2
 8002280:	60cb      	str	r3, [r1, #12]
 8002282:	e03e      	b.n	8002302 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e039      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002290:	4b1e      	ldr	r3, [pc, #120]	@ (800230c <HAL_RCC_OscConfig+0x618>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f003 0203 	and.w	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d12c      	bne.n	80022fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ae:	3b01      	subs	r3, #1
 80022b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d123      	bne.n	80022fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d11b      	bne.n	80022fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d113      	bne.n	80022fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e0:	085b      	lsrs	r3, r3, #1
 80022e2:	3b01      	subs	r3, #1
 80022e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d109      	bne.n	80022fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	3b01      	subs	r3, #1
 80022f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3720      	adds	r7, #32
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	019f800c 	.word	0x019f800c
 8002314:	feeefffc 	.word	0xfeeefffc

08002318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e11e      	b.n	800256e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002330:	4b91      	ldr	r3, [pc, #580]	@ (8002578 <HAL_RCC_ClockConfig+0x260>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d910      	bls.n	8002360 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b8e      	ldr	r3, [pc, #568]	@ (8002578 <HAL_RCC_ClockConfig+0x260>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 020f 	bic.w	r2, r3, #15
 8002346:	498c      	ldr	r1, [pc, #560]	@ (8002578 <HAL_RCC_ClockConfig+0x260>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b8a      	ldr	r3, [pc, #552]	@ (8002578 <HAL_RCC_ClockConfig+0x260>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e106      	b.n	800256e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d073      	beq.n	8002454 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d129      	bne.n	80023c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002374:	4b81      	ldr	r3, [pc, #516]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0f4      	b.n	800256e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002384:	f000 f966 	bl	8002654 <RCC_GetSysClockFreqFromPLLSource>
 8002388:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4a7c      	ldr	r2, [pc, #496]	@ (8002580 <HAL_RCC_ClockConfig+0x268>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d93f      	bls.n	8002412 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002392:	4b7a      	ldr	r3, [pc, #488]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d033      	beq.n	8002412 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d12f      	bne.n	8002412 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023b2:	4b72      	ldr	r3, [pc, #456]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023ba:	4a70      	ldr	r2, [pc, #448]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 80023bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023c2:	2380      	movs	r3, #128	@ 0x80
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	e024      	b.n	8002412 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d0:	4b6a      	ldr	r3, [pc, #424]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d109      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0c6      	b.n	800256e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e0:	4b66      	ldr	r3, [pc, #408]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0be      	b.n	800256e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023f0:	f000 f8ce 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4a61      	ldr	r2, [pc, #388]	@ (8002580 <HAL_RCC_ClockConfig+0x268>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d909      	bls.n	8002412 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023fe:	4b5f      	ldr	r3, [pc, #380]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002406:	4a5d      	ldr	r2, [pc, #372]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 8002408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800240c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800240e:	2380      	movs	r3, #128	@ 0x80
 8002410:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002412:	4b5a      	ldr	r3, [pc, #360]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f023 0203 	bic.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4957      	ldr	r1, [pc, #348]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002424:	f7fe fa2e 	bl	8000884 <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	e00a      	b.n	8002442 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242c:	f7fe fa2a 	bl	8000884 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e095      	b.n	800256e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	4b4e      	ldr	r3, [pc, #312]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 020c 	and.w	r2, r3, #12
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	429a      	cmp	r2, r3
 8002452:	d1eb      	bne.n	800242c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d023      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800246c:	4b43      	ldr	r3, [pc, #268]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4a42      	ldr	r2, [pc, #264]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 8002472:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002476:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002484:	4b3d      	ldr	r3, [pc, #244]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800248c:	4a3b      	ldr	r2, [pc, #236]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 800248e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002492:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002494:	4b39      	ldr	r3, [pc, #228]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	4936      	ldr	r1, [pc, #216]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
 80024a6:	e008      	b.n	80024ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2b80      	cmp	r3, #128	@ 0x80
 80024ac:	d105      	bne.n	80024ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024ae:	4b33      	ldr	r3, [pc, #204]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	4a32      	ldr	r2, [pc, #200]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 80024b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002578 <HAL_RCC_ClockConfig+0x260>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d21d      	bcs.n	8002504 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002578 <HAL_RCC_ClockConfig+0x260>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 020f 	bic.w	r2, r3, #15
 80024d0:	4929      	ldr	r1, [pc, #164]	@ (8002578 <HAL_RCC_ClockConfig+0x260>)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024d8:	f7fe f9d4 	bl	8000884 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7fe f9d0 	bl	8000884 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e03b      	b.n	800256e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b20      	ldr	r3, [pc, #128]	@ (8002578 <HAL_RCC_ClockConfig+0x260>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d1ed      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002510:	4b1a      	ldr	r3, [pc, #104]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4917      	ldr	r1, [pc, #92]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 800251e:	4313      	orrs	r3, r2
 8002520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800252e:	4b13      	ldr	r3, [pc, #76]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	490f      	ldr	r1, [pc, #60]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002542:	f000 f825 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 8002546:	4602      	mov	r2, r0
 8002548:	4b0c      	ldr	r3, [pc, #48]	@ (800257c <HAL_RCC_ClockConfig+0x264>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	490c      	ldr	r1, [pc, #48]	@ (8002584 <HAL_RCC_ClockConfig+0x26c>)
 8002554:	5ccb      	ldrb	r3, [r1, r3]
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	fa22 f303 	lsr.w	r3, r2, r3
 800255e:	4a0a      	ldr	r2, [pc, #40]	@ (8002588 <HAL_RCC_ClockConfig+0x270>)
 8002560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002562:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <HAL_RCC_ClockConfig+0x274>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe f940 	bl	80007ec <HAL_InitTick>
 800256c:	4603      	mov	r3, r0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40022000 	.word	0x40022000
 800257c:	40021000 	.word	0x40021000
 8002580:	04c4b400 	.word	0x04c4b400
 8002584:	08002bc8 	.word	0x08002bc8
 8002588:	20000000 	.word	0x20000000
 800258c:	20000004 	.word	0x20000004

08002590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002596:	4b2c      	ldr	r3, [pc, #176]	@ (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d102      	bne.n	80025a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025a2:	4b2a      	ldr	r3, [pc, #168]	@ (800264c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	e047      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025a8:	4b27      	ldr	r3, [pc, #156]	@ (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 030c 	and.w	r3, r3, #12
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d102      	bne.n	80025ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025b4:	4b26      	ldr	r3, [pc, #152]	@ (8002650 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	e03e      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025ba:	4b23      	ldr	r3, [pc, #140]	@ (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d136      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025c6:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3301      	adds	r3, #1
 80025dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d10c      	bne.n	80025fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002650 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	4a16      	ldr	r2, [pc, #88]	@ (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ee:	68d2      	ldr	r2, [r2, #12]
 80025f0:	0a12      	lsrs	r2, r2, #8
 80025f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	617b      	str	r3, [r7, #20]
      break;
 80025fc:	e00c      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025fe:	4a13      	ldr	r2, [pc, #76]	@ (800264c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	fbb2 f3f3 	udiv	r3, r2, r3
 8002606:	4a10      	ldr	r2, [pc, #64]	@ (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002608:	68d2      	ldr	r2, [r2, #12]
 800260a:	0a12      	lsrs	r2, r2, #8
 800260c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002610:	fb02 f303 	mul.w	r3, r2, r3
 8002614:	617b      	str	r3, [r7, #20]
      break;
 8002616:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002618:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0e5b      	lsrs	r3, r3, #25
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	3301      	adds	r3, #1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	e001      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002638:	693b      	ldr	r3, [r7, #16]
}
 800263a:	4618      	mov	r0, r3
 800263c:	371c      	adds	r7, #28
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	00f42400 	.word	0x00f42400
 8002650:	016e3600 	.word	0x016e3600

08002654 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002654:	b480      	push	{r7}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800265a:	4b1e      	ldr	r3, [pc, #120]	@ (80026d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002664:	4b1b      	ldr	r3, [pc, #108]	@ (80026d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	3301      	adds	r3, #1
 8002670:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d10c      	bne.n	8002692 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002678:	4a17      	ldr	r2, [pc, #92]	@ (80026d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	4a14      	ldr	r2, [pc, #80]	@ (80026d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002682:	68d2      	ldr	r2, [r2, #12]
 8002684:	0a12      	lsrs	r2, r2, #8
 8002686:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	617b      	str	r3, [r7, #20]
    break;
 8002690:	e00c      	b.n	80026ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002692:	4a12      	ldr	r2, [pc, #72]	@ (80026dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	fbb2 f3f3 	udiv	r3, r2, r3
 800269a:	4a0e      	ldr	r2, [pc, #56]	@ (80026d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800269c:	68d2      	ldr	r2, [r2, #12]
 800269e:	0a12      	lsrs	r2, r2, #8
 80026a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026a4:	fb02 f303 	mul.w	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
    break;
 80026aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ac:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	0e5b      	lsrs	r3, r3, #25
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	3301      	adds	r3, #1
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026c6:	687b      	ldr	r3, [r7, #4]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	371c      	adds	r7, #28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	40021000 	.word	0x40021000
 80026d8:	016e3600 	.word	0x016e3600
 80026dc:	00f42400 	.word	0x00f42400

080026e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026e8:	2300      	movs	r3, #0
 80026ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026ec:	2300      	movs	r3, #0
 80026ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8098 	beq.w	800282e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002702:	4b43      	ldr	r3, [pc, #268]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10d      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	4b40      	ldr	r3, [pc, #256]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002712:	4a3f      	ldr	r2, [pc, #252]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002718:	6593      	str	r3, [r2, #88]	@ 0x58
 800271a:	4b3d      	ldr	r3, [pc, #244]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002726:	2301      	movs	r3, #1
 8002728:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800272a:	4b3a      	ldr	r3, [pc, #232]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a39      	ldr	r2, [pc, #228]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002734:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002736:	f7fe f8a5 	bl	8000884 <HAL_GetTick>
 800273a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800273c:	e009      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273e:	f7fe f8a1 	bl	8000884 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d902      	bls.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	74fb      	strb	r3, [r7, #19]
        break;
 8002750:	e005      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002752:	4b30      	ldr	r3, [pc, #192]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0ef      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800275e:	7cfb      	ldrb	r3, [r7, #19]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d159      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002764:	4b2a      	ldr	r3, [pc, #168]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800276e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d01e      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	d019      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002780:	4b23      	ldr	r3, [pc, #140]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800278a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800278c:	4b20      	ldr	r3, [pc, #128]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002792:	4a1f      	ldr	r2, [pc, #124]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800279c:	4b1c      	ldr	r3, [pc, #112]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ac:	4a18      	ldr	r2, [pc, #96]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7fe f861 	bl	8000884 <HAL_GetTick>
 80027c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c4:	e00b      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c6:	f7fe f85d 	bl	8000884 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d902      	bls.n	80027de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	74fb      	strb	r3, [r7, #19]
            break;
 80027dc:	e006      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027de:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ec      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80027ec:	7cfb      	ldrb	r3, [r7, #19]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10b      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f2:	4b07      	ldr	r3, [pc, #28]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002800:	4903      	ldr	r1, [pc, #12]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002808:	e008      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	74bb      	strb	r3, [r7, #18]
 800280e:	e005      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002810:	40021000 	.word	0x40021000
 8002814:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281c:	7c7b      	ldrb	r3, [r7, #17]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d105      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002822:	4ba7      	ldr	r3, [pc, #668]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002826:	4aa6      	ldr	r2, [pc, #664]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002828:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800282c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800283a:	4ba1      	ldr	r3, [pc, #644]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002840:	f023 0203 	bic.w	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	499d      	ldr	r1, [pc, #628]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800285c:	4b98      	ldr	r3, [pc, #608]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002862:	f023 020c 	bic.w	r2, r3, #12
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	4995      	ldr	r1, [pc, #596]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800287e:	4b90      	ldr	r3, [pc, #576]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002884:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	498c      	ldr	r1, [pc, #560]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028a0:	4b87      	ldr	r3, [pc, #540]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	4984      	ldr	r1, [pc, #528]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028c2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	497b      	ldr	r1, [pc, #492]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028e4:	4b76      	ldr	r3, [pc, #472]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	4973      	ldr	r1, [pc, #460]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002906:	4b6e      	ldr	r3, [pc, #440]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	496a      	ldr	r1, [pc, #424]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002928:	4b65      	ldr	r3, [pc, #404]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4962      	ldr	r1, [pc, #392]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800294a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002950:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002958:	4959      	ldr	r1, [pc, #356]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800296c:	4b54      	ldr	r3, [pc, #336]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002972:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297a:	4951      	ldr	r1, [pc, #324]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298a:	2b00      	cmp	r3, #0
 800298c:	d015      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800298e:	4b4c      	ldr	r3, [pc, #304]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002994:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299c:	4948      	ldr	r1, [pc, #288]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029ac:	d105      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ae:	4b44      	ldr	r3, [pc, #272]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	4a43      	ldr	r2, [pc, #268]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029b8:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d015      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029c6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d4:	493a      	ldr	r1, [pc, #232]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029e4:	d105      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e6:	4b36      	ldr	r3, [pc, #216]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	4a35      	ldr	r2, [pc, #212]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029f0:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d015      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029fe:	4b30      	ldr	r3, [pc, #192]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a04:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a0c:	492c      	ldr	r1, [pc, #176]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a1c:	d105      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a1e:	4b28      	ldr	r3, [pc, #160]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	4a27      	ldr	r2, [pc, #156]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a28:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d015      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a36:	4b22      	ldr	r3, [pc, #136]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a44:	491e      	ldr	r1, [pc, #120]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a54:	d105      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a56:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	4a19      	ldr	r2, [pc, #100]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a60:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d015      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a6e:	4b14      	ldr	r3, [pc, #80]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a74:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7c:	4910      	ldr	r1, [pc, #64]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a8c:	d105      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a98:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d018      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002aa6:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aac:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	4902      	ldr	r1, [pc, #8]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	e001      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002acc:	4b21      	ldr	r3, [pc, #132]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a20      	ldr	r2, [pc, #128]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d015      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aea:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	4918      	ldr	r1, [pc, #96]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b02:	d105      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b04:	4b13      	ldr	r3, [pc, #76]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a12      	ldr	r2, [pc, #72]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d015      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002b1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b2a:	490a      	ldr	r1, [pc, #40]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b3c:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4a04      	ldr	r2, [pc, #16]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b48:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000

08002b58 <memset>:
 8002b58:	4402      	add	r2, r0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d100      	bne.n	8002b62 <memset+0xa>
 8002b60:	4770      	bx	lr
 8002b62:	f803 1b01 	strb.w	r1, [r3], #1
 8002b66:	e7f9      	b.n	8002b5c <memset+0x4>

08002b68 <__libc_init_array>:
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	4d0d      	ldr	r5, [pc, #52]	@ (8002ba0 <__libc_init_array+0x38>)
 8002b6c:	4c0d      	ldr	r4, [pc, #52]	@ (8002ba4 <__libc_init_array+0x3c>)
 8002b6e:	1b64      	subs	r4, r4, r5
 8002b70:	10a4      	asrs	r4, r4, #2
 8002b72:	2600      	movs	r6, #0
 8002b74:	42a6      	cmp	r6, r4
 8002b76:	d109      	bne.n	8002b8c <__libc_init_array+0x24>
 8002b78:	4d0b      	ldr	r5, [pc, #44]	@ (8002ba8 <__libc_init_array+0x40>)
 8002b7a:	4c0c      	ldr	r4, [pc, #48]	@ (8002bac <__libc_init_array+0x44>)
 8002b7c:	f000 f818 	bl	8002bb0 <_init>
 8002b80:	1b64      	subs	r4, r4, r5
 8002b82:	10a4      	asrs	r4, r4, #2
 8002b84:	2600      	movs	r6, #0
 8002b86:	42a6      	cmp	r6, r4
 8002b88:	d105      	bne.n	8002b96 <__libc_init_array+0x2e>
 8002b8a:	bd70      	pop	{r4, r5, r6, pc}
 8002b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b90:	4798      	blx	r3
 8002b92:	3601      	adds	r6, #1
 8002b94:	e7ee      	b.n	8002b74 <__libc_init_array+0xc>
 8002b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b9a:	4798      	blx	r3
 8002b9c:	3601      	adds	r6, #1
 8002b9e:	e7f2      	b.n	8002b86 <__libc_init_array+0x1e>
 8002ba0:	08002be8 	.word	0x08002be8
 8002ba4:	08002be8 	.word	0x08002be8
 8002ba8:	08002be8 	.word	0x08002be8
 8002bac:	08002bec 	.word	0x08002bec

08002bb0 <_init>:
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	bf00      	nop
 8002bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb6:	bc08      	pop	{r3}
 8002bb8:	469e      	mov	lr, r3
 8002bba:	4770      	bx	lr

08002bbc <_fini>:
 8002bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bbe:	bf00      	nop
 8002bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc2:	bc08      	pop	{r3}
 8002bc4:	469e      	mov	lr, r3
 8002bc6:	4770      	bx	lr
